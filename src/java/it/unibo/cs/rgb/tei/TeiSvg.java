/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package it.unibo.cs.rgb.tei;

import it.unibo.cs.rgb.util.TreeNode;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author gine
 */
public class TeiSvg {
    int rCircle = 40;
    ArrayList<HashMap> witlist;

    public TeiSvg(ArrayList<HashMap> witlist) {
        this.witlist = witlist;
    }
    // verifica che l'oggetto passato sia un albero e che abbia tutti gli
    // elementi che servono per generare l'albero
    public boolean canGetSvg(){
        boolean ret = false;

        int wLength=witlist.size(), derCounter=0, sigilCounter=0, idCounter=0, missingCounter=0;

        for (int i=0; i<wLength; i++){
            if (witlist.get(i).get("der") != null)
                derCounter++;

            if (witlist.get(i).get("sigil") != null)
                sigilCounter++;

            if (witlist.get(i).get("id") != null)
                idCounter++;

            if (witlist.get(i).get("missing") != null)
                missingCounter++;
        }

        if (derCounter == (wLength-1) && sigilCounter == wLength && idCounter == wLength && missingCounter == wLength) {
            int counter=0;
            for (int d=0; d<wLength; d++)
                for (int i=0; i<wLength; i++)
                    if(witlist.get(d).get("der") != null)
                        if (((String)witlist.get(i).get("id")).equalsIgnoreCase((String) witlist.get(d).get("der")))
                            counter++;

            if (counter == (wLength-1))
                ret=true;
        }

        return ret;
    }
    // disegna svg con un array di TreeNode
    public String getSvg(){
        int footerSpace=80,yText=5, nGreekNodes = 0;
        int xCirclePos, yCirclePos,xFirstPLinePos,yFirstPLinePos,xSecondPLinePos,ySecondPLinePos;
        String labelId, out="", classStyle,cssUri="http://ltw1001.web.cs.unibo.it/svg.css";
        ArrayList<TreeNode> nodes = getTree();

        int maxX=maxPos(nodes, true);
        int maxY=maxPos(nodes, false);

        out += "<?xml-stylesheet type=\"text/css\" href=\""+cssUri+"\" encoding=\"UTF-8\"?>"+" \n";
        out += "<!DOCTYPE html  PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n";
        out += "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> \n";
        out += "<html xmlns=\"http://www.w3.org/1999/xhtml\"\n";
        out += "xmlns:svg= \"http://www.w3.org/2000/svg\"> \n";
        out += "<body>"+" \n";
        out += "<svg:svg width=\""+(maxX+footerSpace)+"\" height=\""+(maxY+footerSpace)+"\" version=\"1.1\" >"+" \n";

        //disegna le linee
        for (int i = 0; i < nodes.size(); i++){
             if (! isLeaf(nodes.get(i))) {
                int nSibling=nodes.get(i).getChildren().size();
                for (int s=0;s<nSibling;s++) {
                    xFirstPLinePos=nodes.get(i).getX();
                    yFirstPLinePos=nodes.get(i).getY();
                    xSecondPLinePos=nodes.get(i).getChildren().get(s).getX();
                    ySecondPLinePos=nodes.get(i).getChildren().get(s).getY();

                    String line="<svg:line id=\""+nodes.get(i).getId()+"\" x1=\""+xFirstPLinePos+"\" y1=\""+yFirstPLinePos+"\" x2=\""+xSecondPLinePos+"\" y2=\""+ySecondPLinePos+"\"/>";
                    out += line+"\n";
                 }
              }
        }

        //disegna cerchi e testo
        String text;
        for (int i = 0; i < nodes.size(); i++){
            if (nodes.get(i).getMissing()) {
                labelId = getGreek(nGreekNodes);
                text = getPath(labelId);
                classStyle="witness-greek";
                nGreekNodes++;
            } else {
                labelId=nodes.get(i).getSigil();
                classStyle="witness";
                text="<svg:text class=\""+classStyle+"\" id=\""+nodes.get(i).getId()+"\" y=\""+yText+"\">"+ labelId +"</svg:text>";
            }
            String letters = text;
            xCirclePos = nodes.get(i).getX();
            yCirclePos = nodes.get(i).getY();

            String circle="<svg:circle class=\""+classStyle+"\" id=\""+nodes.get(i).getId()+"\" r=\""+rCircle+"\"/>",
                   group="<svg:g transform=\"translate("+xCirclePos+" "+yCirclePos+")\">";

            out += group+"\n";
            out += circle+"\n";
            out += letters+"\n";
            out += "</svg:g>"+"\n";
        }

        out += "</svg:svg>"+"\n";
        out += "</body>"+"\n";
        out += "</html>"+"\n";

        return out;
    }
    // genera l'albero a partire dal hashmap ricevuta con il costruttore
    private ArrayList<TreeNode> getTree(){
        ArrayList<TreeNode> nodes = new ArrayList<TreeNode>();
        
        //creo i nodi
        for (int i=0; i<witlist.size(); i++){
            String id= (String) witlist.get(i).get("id");
            String sigil= (String) witlist.get(i).get("sigil");
            if ((Boolean) witlist.get(i).get("missing"))
                nodes.add(new TreeNode(null, id, sigil, true));
            else
                nodes.add(new TreeNode(null, id, sigil, false));
        }

        //collego i nodi fra loro cosi' che siano un albero generico
        for (int i=0; i<nodes.size(); i++){
            if (witlist.get(i).get("der") != null){
                String parent= (String) witlist.get(i).get("der");

                for (int n=0; n<nodes.size();n++){
                    if (nodes.get(n).getId().matches(parent)){
                        nodes.get(n).addChild(nodes.get(i));
                        break;
                    }
                 }
            }
        }

        //setto la profondita' dei nodi
        for (int i=0;i<nodes.size();i++){
             nodes.get(i).setDepth(countDepth(nodes.get(i)));
        }
        
        getPos2(nodes);
        
        return nodes;
    }

        private void getPos2(ArrayList<TreeNode> nodes){
        int ySpaceBetweenCircle = 50, xSpaceBetweenCircle = 80, maxDepth, maxWidth,canvasX;
        TreeNode root;
        ArrayList<Integer> widthList = new ArrayList<Integer>();


        maxDepth=getMaxDepth(nodes);
        int[] printedXlevel = new int[maxDepth];
        for (int i=0;i<maxDepth;i++){
            widthList.add(new Integer((getWidth(i, nodes)+1)));
            printedXlevel[i]=0;
        }
        maxWidth=getMaxWidth(widthList);
        canvasX=(xSpaceBetweenCircle*2)+((maxWidth-1)*rCircle*2)+(xSpaceBetweenCircle*(maxWidth-2));

        root=getRoot(nodes);
        root.setPosition(canvasX/widthList.get(0),ySpaceBetweenCircle+(root.getDepth()*rCircle));
        printedXlevel[0]++;
        for(int i=0;i<root.getChildren().size();i++){
            drawNode(root.getChildren().get(i), printedXlevel, widthList, canvasX);
        }
    }

    private void drawNode(TreeNode node,int i[] ,ArrayList<Integer> widthList,int cavasX){
        int ySpaceBetweenCircle = 50;

        int depth = node.getDepth()-1;
        int spaceXnode = cavasX/(widthList.get(depth));

        node.setPosition(spaceXnode*(i[depth]+1),ySpaceBetweenCircle+(rCircle*2+ySpaceBetweenCircle)*depth+rCircle);
        i[depth]++;

        if (isLeaf(node))
            return;

        for (int s=0; s <node.getChildren().size();s++){
            drawNode(node.getChildren().get(s), i, widthList, cavasX);
        }

    }

    private int getMaxDepth(ArrayList<TreeNode> nodes){
        int ret=0,swapInt=0;

        for (int i=0; i< nodes.size();i++){
            swapInt=nodes.get(i).getDepth();

            if(ret<swapInt)
                ret=swapInt;
        }

        return ret;
    }

    private int getMaxWidth(ArrayList<Integer> widthList){
        int ret=0,swapInt=0;
        
        for (int i=0; i< widthList.size();i++){
            swapInt=widthList.get(i);
            
            if(ret<swapInt)
                ret=swapInt;
        }
        
        return ret;
    }

    private int getWidth(int depth, ArrayList<TreeNode> nodes) {
        int ret = 0;
        
        for (int i=0; i< nodes.size();i++)
            if ((nodes.get(i).getDepth()-1) == depth)
                ret++;
                
        return ret;
    }

    private void getPos(ArrayList<TreeNode> nodes){
        int ySpaceBetweenCircle = 60, xSpaceBetweenCircle = 60;

        //setta le coordinate x,y delle foglie
        int nDrawned=1, nNodes = nodes.size();
        for (int n=0;n<nNodes;n++){
            if(! nodes.get(n).getDrawned()){
                if (isLeaf(nodes.get(n))){
                   int nSibling=nodes.get(n).getParent().getChildren().size();
                   int depth=nodes.get(n).getDepth(),
                           y=rCircle+(depth-1)*(rCircle*2+ySpaceBetweenCircle)+rCircle;
                   for (int s=0; s<nSibling; s++){
                       if (isLeaf(nodes.get(n).getParent().getChildren().get(s))){
                         int x=rCircle+(nDrawned-1)*(rCircle*2+xSpaceBetweenCircle)+rCircle;
                            nodes.get(n).getParent().getChildren().get(s).setDrawned(true);
                            nodes.get(n).getParent().getChildren().get(s).setPosition(x, y);
                            nDrawned++;
                       }
                   }

                }
            }
        }

        //setta le coordinate x,y dei nodi padre
        nDrawned--;
        while (nDrawned < nNodes) {
            for (int n=0; n < nNodes; n++) {
                if(! nodes.get(n).getDrawned()){
                    int nSibling = nodes.get(n).getChildren().size();
                    boolean allSiblingDrawned = true;
                    for (int c=0; c<nSibling;c++) {
                        if (! nodes.get(n).getChildren().get(c).getDrawned()){
                          allSiblingDrawned = false;
                          break;
                        }
                    }

                    if (allSiblingDrawned) {
                        int depth = nodes.get(n).getDepth(),
                            y=rCircle+(depth-1)*(rCircle*2+ySpaceBetweenCircle)+rCircle;
                        if (nSibling == 1)
                            nodes.get(n).setPosition(nodes.get(n).getChildren().get(0).getX(), y);
                        else
                            nodes.get(n).setPosition(((nodes.get(n).getChildren().get(--nSibling).getX()+nodes.get(n).getChildren().get(0).getX())/2), y);

                        nodes.get(n).setDrawned(true);
                        nDrawned++;
                    }
                }
            }
        }
    }
    //TODO:
    public boolean hasDtd(){
        return true;
    }
    //TODO:
    public boolean isValid(){
        return true;
    }
    // pos=true --> x, pos=false --> y
    private int maxPos(ArrayList<TreeNode> nodes,boolean pos) {
        int ret=0,swapRet=0;

        for (int n=0; n<nodes.size(); n++){
            if (pos)
                swapRet=nodes.get(n).getX();
            else
                swapRet=nodes.get(n).getY();

            if (ret<swapRet){
                ret=swapRet;
            }
        }

        return ret;
    }

    private int minPos(ArrayList<TreeNode> nodes,boolean pos) {
        int ret=0,swapRet=0;

        for (int n=0; n<nodes.size(); n++){
            if (pos)
                swapRet=nodes.get(n).getX();
            else
                swapRet=nodes.get(n).getY();

            if (ret>swapRet){
                ret=swapRet;
            }
        }

        return ret;
    }
    //preleva la lettera greca da usare per i nodi missing=true in base ad un counter
    private String getGreek(int nGreekNodes){
        String gLetters="αβγδεζηθικλμνξοπρστυφχψω";
        
        return ""+gLetters.charAt(nGreekNodes%gLetters.length());
    }

    private String getPath(String greekLetter){
        String ret;

        if (greekLetter.equalsIgnoreCase("α"))
            ret="<svg:path transform=\"translate (61.421033,-1098.0507)\" d=\"m -53.421033,1090.0507 4.22844,0 -2.56194,9.7844 c -0.49748,1.8597 -0.83742,3.001 -1.01981,3.4237 0.66328,2.5922 1.62504,3.8883 2.8853,3.8883 1.49236,0 2.26344,-0.8733 2.3132,-2.6204 l 0.89543,0 c -0.0497,1.6342 -0.40214,2.9549 -1.05711,3.9621 -0.65501,1.0076 -1.51314,1.5112 -2.57436,1.5112 -0.87887,0 -1.53386,-0.3029 -1.96499,-0.9086 -0.43116,-0.6059 -0.89544,-1.8457 -1.39289,-3.7193 -1.72456,3.0851 -4.54351,4.6279 -8.45687,4.6279 -2.66973,0 -4.7922,-0.884 -6.36752,-2.6521 -1.5753,-1.7681 -2.36296,-4.3005 -2.36294,-7.5972 -2e-5,-3.2404 0.86226,-5.7621 2.58681,-7.5654 1.72452,-1.8035 3.79727,-2.7051 6.21826,-2.7051 1.70795,0 3.10914,0.5142 4.20357,1.5427 1.0944,1.0286 2.06444,2.7051 2.91015,5.0297 l 1.51727,-6.0019 z m -2.18884,8.2839 c -0.77937,-2.268 -1.64993,-4.0397 -2.61168,-5.3146 -0.96177,-1.2751 -2.11422,-1.9125 -3.45736,-1.9125 -3.03452,0 -4.55179,3.015 -4.55179,9.0448 0,5.7197 1.45095,8.5798 4.35279,8.5798 2.52047,0 4.38596,-2.522 5.59646,-7.5655 l 0.67158,-2.8319 z\" />";
        else if (greekLetter.equalsIgnoreCase("β"))
            ret="<svg:path transform=\"translate (-19.267, -1535.37)\" d=\"m 14.975576,1554.3738 -4.07425,0 c 0.592564,-2.1488 0.888941,-4.0879 0.888941,-5.8324 l 0,-20.7505 c 0,-2.162 0.251029,-3.7688 0.753078,-4.8214 0.502049,-1.0562 1.481516,-1.9867 2.938392,-2.7911 1.456875,-0.8085 3.279936,-1.2111 5.469354,-1.2112 2.600866,0 4.786179,0.5287 6.555755,1.5921 1.76959,1.0605 2.654434,2.5675 2.654434,4.5235 0,2.2878 -1.407422,4.1629 -4.22235,5.6218 4.197718,1.5244 6.296522,3.9222 6.296522,7.1856 0,1.7761 -0.555613,3.3676 -1.666749,4.7753 -1.111136,1.4031 -2.395092,2.4037 -3.851976,3.0003 -1.456874,0.5943 -3.197629,0.8967 -5.222434,0.8967 -2.304571,0 -4.181193,-0.6677 -5.629856,-2.0004 l 0,3.5439 c 0,2.4366 -0.296286,4.5262 -0.888861,6.2678 l 0,0 z m 0.888861,-11.5315 c 1.284048,1.6429 3.078362,2.4602 5.382938,2.4602 2.222269,0 3.851972,-0.6267 4.8891,-1.8783 1.037044,-1.2481 1.555617,-2.77 1.555617,-4.5605 0,-1.3723 -0.341643,-2.7765 -1.024724,-4.2021 -0.683191,-1.432 -1.55981,-2.5186 -2.6297,-3.2721 -0.987767,0.1939 -1.876711,0.2865 -2.666834,0.2865 -1.662643,0 -2.493915,-0.334 -2.493915,-1.0106 0,-0.6088 0.699599,-0.9118 2.0989,-0.9118 0.872434,0 1.958833,0.1517 3.259311,0.458 1.168802,-1.5248 1.753159,-3.1834 1.753159,-4.9742 0,-1.6028 -0.456788,-2.8268 -1.370372,-3.678 -0.913671,-0.853 -2.103011,-1.276 -3.568099,-1.276 -1.168709,0 -2.16879,0.2518 -3.000077,0.7589 -0.831269,0.5109 -1.403304,1.1159 -1.716108,1.822 -0.312803,0.7034 -0.469196,1.8588 -0.469196,3.4564 l 0,16.5216 z\" />";
        else if (greekLetter.equalsIgnoreCase("δ"))
            ret="<svg:path transform=\"translate (-14.267, -1543.37)\" d=\"m 17.115515,1540.7542 c -0.962463,-0.8813 -2.299993,-1.9357 -4.013091,-3.1629 -1.886168,-1.3535 -3.1566452,-2.4198 -3.8109828,-3.1987 -0.6544984,-0.7785 -0.9816184,-1.6321 -0.9816184,-2.5604 0,-1.3845 0.7891438,-2.4744 2.3675052,-3.2693 1.578292,-0.7946 3.637766,-1.1916 6.178347,-1.1917 2.54066,10e-5 4.758919,0.3535 6.654883,1.0618 1.895776,0.7074 2.843708,1.6839 2.843708,2.9265 0,0.5983 -0.230964,1.0943 -0.692906,1.488 -0.461842,0.3922 -1.00077,0.5888 -1.616778,0.5888 -0.885467,0 -1.924827,-0.5426 -3.11808,-1.6283 -1.212587,-1.1019 -2.237516,-1.8769 -3.074686,-2.3248 -0.837258,-0.4481 -1.814153,-0.6726 -2.93051,-0.6726 -1.4243,0 -2.593578,0.2598 -3.507849,0.7789 -0.914245,0.5193 -1.371373,1.1805 -1.371373,1.982 0,0.7563 0.375404,1.4637 1.125974,2.1255 0.750657,0.6603 2.685026,1.8645 5.803106,3.6114 3.329711,1.8726 5.68279,3.336 7.059074,4.389 1.376096,1.0548 2.497255,2.337 3.363388,3.8478 0.866134,1.51 1.2992,3.1071 1.2992,4.7915 0,2.9588 -1.275052,5.5663 -3.82533,7.8234 -2.550366,2.2594 -5.52891,3.3878 -8.935692,3.3878 -3.098834,0 -5.71648,-0.9044 -7.8528636,-2.7137 -2.1365491,-1.8098 -3.2047806,-4.2261 -3.2047806,-7.2467 0,-2.9107 1.178903,-5.342 3.5367115,-7.2937 2.3578187,-1.9503 5.2593567,-3.1314 8.7046437,-3.5396 l 0,0 z m 1.270325,1.0849 c -5.524008,0.7394 -8.286002,3.8398 -8.286002,9.3 0,2.8159 0.688102,5.0035 2.064286,6.5618 1.376184,1.5577 2.978518,2.3365 4.80704,2.3365 1.90549,0 3.47415,-0.7507 4.705982,-2.2546 1.231846,-1.5023 1.847756,-3.5361 1.847756,-6.1009 0,-3.7128 -1.712934,-6.9954 -5.139062,-9.8428 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("γ"))
            ret="<svg:path transform=\"translate (-14.267, -1543.37)\" d=\"m 23.537511,1531.1857 5.5685,0 -10.8397,20.0285 c 0.2707,2.1423 0.4057,4.0173 0.4057,5.6181 0,4.4618 -0.9463,6.6928 -2.8379,6.6928 -1.3695,0 -2.0545,-0.9387 -2.0545,-2.8114 0,-2.444 1.0094,-5.5088 3.0275,-9.1911 -0.3964,-2.2854 -0.9509,-5.0402 -1.6624,-8.262 -0.7121,-3.2237 -1.4415,-5.533 -2.19,-6.9308 -0.7476,-1.3974 -1.8149,-2.0957 -3.2028995,-2.0957 -2.2704,0 -3.4865,1.4927 -3.6492,4.4774 l -0.973,0 c 0,-5.2391 1.7659,-7.858 5.2977995,-7.858 2.0366,0 3.5502,1.0591 4.5418,3.1786 0.9906,2.1188 2.0089,6.7271 3.0541,13.8226 l 5.5142,-16.669 z\" />";
        else if (greekLetter.equalsIgnoreCase("ε"))
            ret="<svg:path transform=\"translate (-21.267, -1545.37)\" d=\"m 20.174867,1544.0727 c -4.286169,-1.523 -6.429251,-3.8293 -6.429244,-6.9188 -7e-6,-2.4368 1.136806,-4.3841 3.410436,-5.8418 2.273616,-1.4577 5.096606,-2.1866 8.468982,-2.1866 3.06774,0 5.504543,0.5059 7.310408,1.5175 1.80582,1.0118 2.708745,2.2247 2.708768,3.6389 -2.3e-5,0.7398 -0.282866,1.3871 -0.848529,1.9419 -0.565709,0.5548 -1.218426,0.8322 -1.958145,0.8322 -1.218422,0 -2.219253,-0.8485 -3.002492,-2.5456 -1.087875,-2.3498 -2.719662,-3.5247 -4.895363,-3.5247 -1.718831,0 -3.133046,0.5657 -4.242649,1.6971 -1.109625,1.1314 -1.664432,2.7088 -1.664423,4.7322 -9e-6,3.9815 2.056041,5.9723 6.168158,5.9723 0.435129,0 0.935541,-0.043 1.501247,-0.1305 0.979054,-0.1306 1.740552,-0.1958 2.284501,-0.1959 1.327168,10e-5 1.99076,0.3808 1.990783,1.1423 -2.3e-5,0.8485 -0.674494,1.2728 -2.023419,1.2728 -0.478674,0 -1.196662,-0.076 -2.153959,-0.2285 -0.718004,-0.1305 -1.272812,-0.1958 -1.664423,-0.1958 -4.351447,0 -6.527164,2.2193 -6.527154,6.6577 -1e-5,2.154 0.576555,3.8891 1.729697,5.2054 1.153116,1.3163 2.763147,1.9745 4.830092,1.9745 2.589085,0 4.3079,-1.3381 5.156449,-4.0142 0.435125,-1.4142 0.919221,-2.3933 1.452291,-2.9372 0.533028,-0.5439 1.245575,-0.8159 2.137644,-0.8159 0.739719,0 1.408752,0.2665 2.007099,0.7996 0.598296,0.533 0.897458,1.2129 0.897484,2.0397 -2.6e-5,1.9799 -1.109641,3.6171 -3.328849,4.9117 -2.219253,1.2945 -4.906261,1.9418 -8.061032,1.9418 -3.459403,0 -6.532601,-0.8268 -9.219605,-2.4803 -2.687014,-1.6536 -4.030517,-3.8619 -4.030514,-6.6251 -3e-6,-3.4594 2.665247,-6.0049 7.995761,-7.6367 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("ζ"))
            ret="<svg:path transform=\"translate (-8.267, -1547.37)\" d=\"m 7.0496076,1529.6037 0.3914793,0.7177 c -1.6148639,0.5453 -2.422292,1.3231 -2.4222853,2.3333 -6.7e-6,0.7045 0.2976819,1.2428 0.893065,1.6153 0.5953703,0.3723 1.2763803,0.5585 2.0430397,0.5585 0.081547,0 0.2038871,-0.01 0.3670133,-0.019 1.1744305,-1.0104 2.5935484,-1.9744 4.2573544,-2.8916 1.663776,-0.9174 2.985019,-1.3759 3.96374,-1.3759 0.750314,0 1.125482,0.2457 1.125502,0.7377 -2e-5,0.8773 -0.766662,1.7449 -2.299952,2.6024 -1.533312,0.8576 -3.661985,1.459 -6.3860214,1.8047 -4.4041634,3.6827 -6.6062384,8.01 -6.6062338,12.9823 -4.6e-6,2.0473 0.497501,3.5796 1.4925183,4.5964 0.995006,1.017 2.7566684,1.5259 5.2849893,1.5259 0.2772875,0 0.9134436,-0.025 1.9084636,-0.077 1.125494,-0.037 1.892152,-0.057 2.299947,-0.057 1.908452,0 3.282719,0.5052 4.122785,1.5157 0.840031,1.0105 1.26006,2.2336 1.260082,3.669 -2.2e-5,2.1008 -0.652488,3.7594 -1.957407,4.9757 -1.304955,1.2161 -3.091077,1.8248 -5.358394,1.8248 -2.1368386,0 -3.2052539,-0.5847 -3.2052445,-1.755 -9.4e-6,-0.9174 0.5709002,-1.3758 1.7127291,-1.3758 0.3262224,0 0.9379064,0.1128 1.8350684,0.3392 0.750316,0.1991 1.419094,0.2986 2.006337,0.2986 1.011305,0 1.814653,-0.3221 2.410049,-0.9668 0.595355,-0.645 0.893049,-1.3727 0.893071,-2.1838 -2.2e-5,-0.9045 -0.326256,-1.5623 -0.978711,-1.9743 -0.652486,-0.412 -1.729058,-0.618 -3.229708,-0.618 -0.342566,0 -1.174461,0.037 -2.495692,0.1196 -0.6035442,0.025 -1.1010489,0.037 -1.4925209,0.037 -5.8558996,0 -8.7838464,-2.8981 -8.78384393,-8.6945 -2.47e-6,-5.3445 2.38150143,-10.0706 7.14452013,-14.1787 -1.2233833,-0.025 -2.2387843,-0.2857 -3.0462081,-0.778 -0.8074347,-0.4915 -1.2111465,-1.2028 -1.211142,-2.1334 -4.5e-6,-1.5288 1.3538638,-2.5857 4.0616104,-3.171 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("η"))
            ret="<svg:path transform=\"translate (-11.267, -1545.37)\" d=\"m 9.6343962,1535.8205 c 2.7233918,-3.4173 5.3947548,-5.1259 8.0140948,-5.1259 4.093759,0 6.140647,3.0096 6.140671,9.0288 l 0,19.3067 c -2.4e-5,3.2959 0.329559,5.8284 0.988752,7.5978 l -4.397345,0 c -0.5898,-1.6306 -0.884693,-4.6142 -0.884672,-8.9508 l 0,-18.5261 c -2.1e-5,-1.7867 -0.277564,-3.1093 -0.832633,-3.968 -0.555109,-0.8587 -1.526512,-1.288 -2.914218,-1.288 -2.081596,0 -4.119811,1.1536 -6.1146498,3.4606 l 0,17.8756 -4.2932646,0 0,-17.8756 c -5e-6,-1.6132 -0.160463,-2.7234 -0.481367,-3.3305 -0.320914,-0.6071 -0.862993,-0.9107 -1.626236,-0.9107 -1.231607,0 -1.986179,1.2143 -2.26372301,3.6428 l -0.936711,0 c 0.329583,-4.0417 1.99484701,-6.0626 4.99579801,-6.0626 1.335677,0 2.428507,0.464 3.278495,1.392 0.8499686,0.9281 1.2923046,2.1727 1.3270086,3.7339 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("θ"))
            ret="<svg:path transform=\"translate (-8.267, -1547.37)\" d=\"m 10.573783,1530.4664 c 2.795903,0 5.153406,1.6337 7.072514,4.9011 1.91907,3.2674 2.878616,7.5234 2.878639,12.7677 -2.3e-5,5.6581 -1.034016,10.1166 -3.101982,13.3758 -2.068003,3.2591 -4.458593,4.8887 -7.171775,4.8887 -2.6635757,0 -5.0086727,-1.5841 -7.0352917,-4.7522 -2.026629,-3.1682 -3.03994117,-7.4655 -3.03993867,-12.8919 -2.5e-6,-5.4429 1.00503767,-9.8518 3.01512267,-13.2268 2.010076,-3.3749 4.470978,-5.0624 7.3827117,-5.0624 l 0,0 z m 5.335406,17.1229 c -1.7e-5,-10.4557 -1.836389,-15.6836 -5.509117,-15.6836 -3.7720157,0 -5.6580157,5.2279 -5.6580107,15.6836 l 11.1671277,0 z m -11.1671277,1.5386 c -5e-6,5.4098 0.504582,9.4011 1.513767,11.9736 1.009168,2.5726 2.365765,3.8589 4.0697967,3.8589 3.689272,0 5.550457,-5.2775 5.583564,-15.8325 l -11.1671277,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("ι"))
            ret="<svg:path transform=\"translate (-8.267, -1547.37)\" d=\"m 20.280086,1558.2072 1.494797,0 c -0.52597,5.6004 -3.18338,8.4006 -7.972241,8.4006 -1.688588,0 -3.134931,-0.4132 -4.3390611,-1.2397 -1.2041504,-0.8265 -2.0069095,-1.764 -2.40828,-2.8126 -0.401387,-1.0485 -0.6020767,-2.868 -0.6020693,-5.4586 l 0,-12.2492 c -7.4e-6,-3.9475 -0.1660997,-6.4763 -0.498267,-7.5866 -0.3321814,-1.1101 -1.1626251,-1.6652 -2.491324,-1.6653 -0.7750817,10e-5 -1.7162497,0.1851 -2.82350481,0.5551 l -0.58130619,-1.3322 11.4601044,-4.1448 1.826962,0 0,26.7192 c -1.1e-5,2.1957 0.235277,3.7006 0.705872,4.5148 0.470576,0.8141 1.328699,1.2212 2.574375,1.2212 1.882316,0 3.100298,-1.6406 3.653943,-4.9219 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("κ"))
            ret="<svg:path transform=\"translate (-12.267, -1550.37)\" d=\"m 9.423101,1539.0981 0,12.7309 7.574429,-8.0114 c 3.01033,-3.1463 5.836172,-4.7194 8.477534,-4.7195 1.029318,10e-5 1.859592,0.2428 2.490822,0.7283 0.631174,0.4856 0.946776,1.1168 0.946805,1.8936 0,0.7575 -0.247656,1.3596 -0.742878,1.8063 -0.49528,0.4467 -1.063359,0.67 -1.704247,0.67 -0.563252,0 -1.310984,-0.2525 -2.243195,-0.7574 -0.932261,-0.505 -1.65086,-0.7575 -2.155799,-0.7575 -1.009946,0 -2.126686,0.6604 -3.350227,1.981 l -5.098175,5.506 9.613699,12.0609 c 1.670233,2.0975 3.884295,3.1851 6.642193,3.2628 l 0,1.0779 -9.438905,0 -11.012056,-14.304 0,14.304 -4.83598,0 0,-16.3142 c -6e-6,-3.2045 -0.126245,-5.2195 -0.378722,-6.0449 -0.252484,-0.8254 -0.825423,-1.2381 -1.718812,-1.2382 -0.5438075,10e-5 -1.2041429,0.1457 -1.98100359,0.437 l -0.4078547,-1.0487 8.04054729,-3.2629 1.281825,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("λ"))
            ret="<svg:path transform=\"translate (-10.267, -1549.37)\" d=\"m 23.918062,1558.9393 0.911284,0 c 0,2.6664 -0.434572,4.6071 -1.303644,5.8221 -0.869117,1.2151 -1.953375,1.8226 -3.252778,1.8226 -1.063185,0 -2.084159,-0.4008 -3.062929,-1.2024 -0.978803,-0.8016 -1.856336,-2.949 -2.6326,-6.4423 l -2.176956,-9.8216 -7.5434122,17.1119 -4.78424298,0 10.83415918,-23.339 c -0.573783,-3.0207 -1.2656832,-5.2567 -2.0757042,-6.7081 -0.810038,-1.4512 -1.814139,-2.1769 -3.0123,-2.1769 -0.961917,0 -1.801479,0.3671 -2.51869,1.1011 -0.717218,0.7341 -1.118013,1.869 -1.20239,3.4047 l -0.911284,0 c 0.05063,-2.4807 0.548457,-4.4678 1.493494,-5.9613 0.945031,-1.4935 2.126327,-2.2403 3.543886,-2.2403 0.911276,0 1.77615,0.3755 2.594629,1.1265 0.818458,0.751 1.5272342,2.0335 2.1263302,3.8476 0.599072,1.8142 1.531451,5.5732 2.797137,11.2772 l 1.797256,8.0243 c 0.725636,3.3245 1.489258,5.5479 2.290869,6.6701 0.801573,1.1223 1.759265,1.6834 2.873076,1.6834 1.890049,0 2.961651,-1.3332 3.21481,-3.9996 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("μ"))
            ret="<svg:path transform=\"translate (-9.267, -1545.37)\" d=\"m 16.380133,1550.352 c -3.192914,3.4223 -5.971262,5.1334 -8.3350524,5.1334 -1.517078,0 -2.928302,-0.5822 -4.233678,-1.7464 l 0,1.4024 c -8e-6,1.6229 0.246959,3.2546 0.740892,4.8952 0.564484,1.8169 0.846728,3.0164 0.846736,3.5986 -8e-6,0.8114 -0.255792,1.4818 -0.767352,2.011 -0.511577,0.5292 -1.146628,0.7938 -1.905155,0.7938 -0.776178,0 -1.39359,-0.3087 -1.85223499,-0.9261 -0.458651,-0.6174 -0.687975,-1.3583 -0.687972,-2.2227 -3e-6,-0.6351 0.229321,-1.7817 0.687972,-3.4399 0.52920599,-1.8346 0.79380999,-3.6162 0.79381499,-5.345 l 0,-23.9996 4.365979,0 0,15.691 c -8e-6,1.5877 0.136704,2.7519 0.410139,3.4928 0.273413,0.7409 0.758524,1.3451 1.455327,1.8126 0.696779,0.4674 1.486182,0.7012 2.3682114,0.7012 1.569975,0 3.607431,-1.0761 6.112373,-3.2282 l 0,-18.4694 4.392439,0 0,18.39 c -2.4e-5,1.5524 0.158739,2.624 0.476288,3.2149 0.317503,0.591 0.855531,0.8865 1.61409,0.8865 1.199514,0 1.975689,-1.1731 2.328523,-3.5193 l 0.952577,0 c -0.335195,4.0044 -2.028663,6.0066 -5.080414,6.0066 -1.323045,0 -2.421153,-0.4455 -3.294328,-1.3363 -0.873217,-0.8908 -1.336273,-2.1565 -1.389175,-3.7971 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("ν"))
            ret="<svg:path transform=\"translate (-14.267, -1547.37)\" d=\"m 14.537437,1566.6667 -7.0147913,-24.2763 c -0.4655437,-1.6037 -1.0792037,-3.1825 -1.8409871,-4.7369 -0.7617903,-1.5542 -1.8092434,-2.3313 -3.1423695,-2.3313 -0.6348205,0 -1.3331262,0.1603 -2.0949127,0.481 L 0,1534.508 l 7.903537,-3.7746 1.3966146,0 8.3479034,28.4579 5.173804,-12.3231 c 0.952214,-2.2204 1.42833,-3.9597 1.428349,-5.2179 -1.9e-5,-1.0115 -0.17989,-2.4301 -0.539601,-4.2557 -0.275104,-1.3323 -0.412658,-2.3315 -0.412632,-2.9976 -2.6e-5,-2.4424 1.132079,-3.6636 3.396304,-3.6636 2.010241,0 3.015371,1.1102 3.015401,3.3305 -3e-5,2.1958 -1.396633,6.3898 -4.189824,12.5823 l -9.077961,20.0205 -1.904458,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("ξ"))
            ret="<svg:path transform=\"translate (-10.267, -1547.37)\" d=\"m 7.6524661,1530.1491 0,0.7337 c -1.7005559,0.031 -2.5508299,0.5094 -2.550822,1.4362 -7.9e-6,1.0041 0.9717352,1.7332 2.9152258,2.1872 1.1105519,-0.7905 2.4206681,-1.4572 3.9303471,-2.0003 1.509657,-0.5429 2.854478,-0.7626 4.034465,-0.6588 0.884961,0.073 1.327453,0.4128 1.327468,1.0049 -1.5e-5,0.7852 -0.867643,1.4813 -2.602877,2.0881 -1.735271,0.6069 -3.808897,0.8171 -6.2208849,0.6308 -1.4229164,0.9433 -2.1343692,2.0135 -2.1343611,3.2106 -8.1e-6,1.2615 0.8329111,2.371 2.4987649,3.3285 2.4987511,-0.7973 5.1363331,-1.0737 7.9127551,-0.8295 1.908756,0.1687 2.863147,0.6057 2.863169,1.3136 -2.2e-5,0.4763 -0.503247,0.8376 -1.509672,1.0838 -1.006464,0.2462 -2.455403,0.2861 -4.346809,0.1196 -1.579094,-0.1413 -3.11479,-0.3574 -4.6070992,-0.6562 -4.5637219,1.7613 -6.8455778,4.0128 -6.8455727,6.7546 -5.1e-6,1.21 0.572629,2.2644 1.7179004,3.1632 1.145261,0.8989 3.00198,1.4613 5.5701616,1.6871 0.4511549,0.039 1.0584919,0.079 1.8220179,0.1021 1.995524,0.059 3.340346,0.1205 4.034463,0.1815 2.099639,0.185 3.626659,0.8209 4.58107,1.9088 0.954367,1.0881 1.43156,2.385 1.431583,3.8911 -2.3e-5,2.1111 -0.780887,3.6482 -2.342592,4.6115 -1.561747,0.9632 -3.323027,1.3586 -5.283847,1.1862 -1.041167,-0.086 -1.900116,-0.3249 -2.57685,-0.6997 -0.676763,-0.375 -1.015135,-0.8326 -1.015124,-1.3733 -1.1e-5,-0.3862 0.177853,-0.6795 0.533591,-0.8799 0.355713,-0.2004 0.759157,-0.2808 1.210339,-0.2412 0.312333,0.03 0.75482,0.1369 1.327467,0.3292 1.075843,0.3522 1.934793,0.5563 2.57685,0.6128 1.179957,0.1085 2.108319,-0.117 2.785085,-0.6626 0.676725,-0.5454 1.015103,-1.2752 1.015123,-2.1891 -2e-5,-0.6436 -0.26031,-1.2361 -0.780863,-1.7774 -0.520598,-0.5414 -1.37087,-0.864 -2.550826,-0.9678 -0.520594,-0.044 -1.145283,-0.085 -1.874072,-0.1215 -2.169079,-0.1005 -3.618016,-0.1824 -4.346806,-0.2467 -3.0887623,-0.2711 -5.5528201,-1.1578 -7.3921815,-2.6582 C 0.91968068,1554.2463 -2.6002619e-6,1552.4469 0,1550.3487 c -2.6002619e-6,-3.2953 2.4467029,-5.8413 7.3401221,-7.6378 -1.7699682,-1.1984 -2.654944,-2.467 -2.6549389,-3.8057 -5.1e-6,-1.2615 0.7461523,-2.4508 2.238478,-3.5683 -2.4814209,-0.6815 -3.7221243,-1.7304 -3.7221196,-3.1463 -4.7e-6,-1.5833 1.4836365,-2.2639 4.4509245,-2.0415 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("ο"))
            ret="<svg:path transform=\"translate (-9.267, -1545.37)\" d=\"m 13.891358,1536.2186 c 4.348213,0 7.839342,1.6515 10.473393,4.9545 2.236805,2.8222 3.355221,6.0624 3.355249,9.7208 -2.8e-5,2.5713 -0.616727,5.174 -1.85009,7.808 -1.233422,2.634 -2.931948,4.62 -5.09559,5.9579 -2.163685,1.3379 -4.572981,2.0069 -7.227896,2.0069 -4.3273387,0 -7.7662067,-1.7247 -10.3166037,-5.174 C 1.0766023,1558.5869 -3.099989e-6,1555.3258 0,1551.7092 c -3.099989e-6,-2.634 0.6532773,-5.2524 1.9598413,-7.8551 1.306557,-2.6026 3.025988,-4.5259 5.158304,-5.7697 2.132297,-1.2438 4.3900307,-1.8658 6.7732127,-1.8658 l 0,0 z m -0.972082,2.0382 c -1.107978,10e-5 -2.221165,0.3293 -3.3395707,0.9878 -1.118428,0.6585 -2.022565,1.8135 -2.71242,3.465 -0.689872,1.6515 -1.034806,3.7734 -1.034796,6.3656 -10e-6,4.181 0.830964,7.7871 2.492917,10.8183 1.6619345,3.0312 3.8517277,4.5468 6.5693907,4.5468 2.027765,0 3.700161,-0.8362 5.017193,-2.5086 1.316991,-1.6724 1.975499,-4.5468 1.975521,-8.6233 -2.2e-5,-5.1008 -1.097532,-9.1145 -3.292534,-12.0412 -1.484273,-2.0069 -3.376172,-3.0103 -5.675701,-3.0104 l 0,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("π"))
            ret="<svg:path transform=\"translate (-13.267, -1551.37)\" d=\"m 25.588336,1536.0181 0,4.7402 -6.057649,0 -0.522212,9.8699 c -0.104459,1.7099 -0.156682,3.1925 -0.156661,4.4479 -2.1e-5,3.0086 0.282844,4.843 0.848591,5.5032 0.565709,0.6601 1.248933,0.9901 2.049677,0.9901 1.671052,0 2.663251,-1.3095 2.976604,-3.9284 l 0.939981,0 c -0.574459,6.0171 -2.506638,9.0257 -5.796544,9.0257 -1.531836,0 -2.763383,-0.5844 -3.69464,-1.7532 -0.931293,-1.1687 -1.396929,-2.9004 -1.396916,-5.1947 -1.3e-5,-1.515 0.182758,-4.7185 0.548322,-9.6102 l 0.704984,-9.3503 -5.535435,0 c -0.365559,7.8786 -0.805085,13.636 -1.3185835,17.2723 -0.5135141,3.6363 -1.0792434,5.9846 -1.6971854,7.0453 -0.617955,1.0605 -1.457843,1.5908 -2.5196666,1.5908 -0.8007266,0 -1.4752498,-0.2922 -2.0235671,-0.8766 -0.5483251,-0.5844 -0.8224837,-1.3528 -0.8224811,-2.3051 -2.6e-6,-0.909 0.4699865,-2.1536 1.4099676,-3.7336 1.3751515,-2.2944 2.4021641,-4.6806 3.0810456,-7.159 0.6788658,-2.4782 1.1923721,-6.4229 1.5405214,-11.8341 l -1.775516,0 c -1.4273824,0 -2.5196718,0.3951 -3.2768736,1.1851 -0.7572094,0.7901 -1.4752497,1.9209 -2.15412081,3.3928 L 0,1545.3362 c 0.50480288,-2.3161 1.1575638,-4.2207 1.9582903,-5.7142 0.8007187,-1.4934 1.6231999,-2.4674 2.4674461,-2.9219 0.8442358,-0.4546 2.3455906,-0.6819 4.5040697,-0.682 l 16.6585299,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("ρ"))
            ret="<svg:path transform=\"translate (-9.267, -1547.37)\" d=\"M 4.7749065,1566.6667 0,1566.6667 c 0.688775,-1.9949 1.0331627,-5.0132 1.0331654,-9.0549 l 0,-14.6752 c -2.7e-6,-4.1458 1.2565502,-7.2161 3.7696643,-9.211 2.5130965,-1.9948 5.2868243,-2.9922 8.3211803,-2.9922 3.294942,0 5.947672,1.0538 7.958178,3.1614 2.010467,2.1076 3.015708,4.87 3.015732,8.2873 -2.4e-5,3.7295 -1.247273,6.9646 -3.741739,9.7054 -2.494512,2.7407 -5.342701,4.1111 -8.544572,4.1111 -2.1594227,0 -4.2164457,-0.6418 -6.1710757,-1.9255 l 0,3.4086 c -8.3e-6,3.6254 -0.2885524,6.6871 -0.8656268,9.185 l 0,0 z m 0.8656268,-18.6302 c -8.3e-6,2.099 0.5956901,3.6992 1.7870964,4.8007 1.1913912,1.1015 2.7085613,1.6522 4.5515233,1.6522 2.178007,0 3.997684,-0.8716 5.45903,-2.615 1.461304,-1.7433 2.191961,-4.046 2.191987,-6.9082 -2.6e-5,-3.6254 -0.995959,-6.4963 -2.987808,-8.6126 -1.991884,-2.1162 -4.207143,-3.1744 -6.6457739,-3.1744 -1.6568008,0 -2.7970083,0.4814 -3.420622,1.4441 -0.623632,0.9628 -0.9354411,2.5283 -0.9354328,4.6966 l 0,8.7166 z\" />";
        else if (greekLetter.equalsIgnoreCase("ς"))
            ret="<svg:path transform=\"translate (-12.267, -1553.37)\" d=\"m 14.706864,1539.3386 c -3.203749,0 -5.7463543,0.3859 -7.6280491,1.1578 -1.8817215,0.772 -3.5320165,2.2096 -4.9505316,4.3132 -1.41852401,2.1037 -2.1282892385861,4.5257 -2.1282833,7.2662 -2.9697515e-6,3.8792 1.3514432,7.2806 4.0533856,10.2044 2.7019361,2.9239 5.9155303,4.3865 9.6403634,4.3865 3.145813,0 5.957964,-1.0327 8.437984,-3.0978 2.479968,-2.065 3.720291,-4.6706 3.72032,-7.8164 -2.9e-5,-2.4124 -0.781213,-4.6949 -2.34445,-6.8468 -1.563293,-2.1519 -3.580533,-3.9323 -6.050855,-5.3412 l 11.289919,0 0,-4.2259 -14.039803,0 z m -0.203181,4.2259 1.013115,0 c 3.531805,3.5511 5.298419,7.44 5.298443,11.6666 -2.4e-5,2.6633 -0.637438,4.9364 -1.911187,6.8182 -1.273796,1.8816 -2.885324,2.8222 -4.834563,2.8222 -2.43176,0 -4.5540019,-1.2498 -6.3681502,-3.7491 -1.8141715,-2.4993 -2.722056,-5.3795 -2.7220502,-8.6411 -5.8e-6,-3.0687 0.8639161,-5.3219 2.5912376,-6.7597 1.7273008,-1.4378 4.0382028,-2.1571 6.9331548,-2.1571 z\" />";
        else if (greekLetter.equalsIgnoreCase("τ"))
            ret="<svg:path transform=\"translate (-14.267, -1547.37)\" d=\"m 18.309246,1536.2909 -1.103886,10.9246 c -0.177653,1.9033 -0.266471,3.8065 -0.266455,5.7097 -1.6e-5,3.6289 0.42504,5.8303 1.275178,6.6043 0.850095,0.774 1.820753,1.161 2.911966,1.161 2.436132,0 3.882602,-1.5353 4.339407,-4.6059 l 1.408401,0 c -0.837453,7.0547 -3.641572,10.5821 -8.412353,10.5821 -4.999214,0 -7.498806,-2.8676 -7.498795,-8.6027 -1.1e-5,-2.8929 0.279133,-6.4964 0.837431,-10.8104 l 1.408398,-10.9627 -3.7684276,0 c -2.0808936,0 -3.698652,0.3489 -4.8532829,1.0467 -1.1546384,0.6979 -2.2268018,2.1 -3.2164864,4.2062 L 0,1541.5438 c 0.8120541,-2.7914 1.7763624,-5.0055 2.8929401,-6.6423 1.1165663,-1.6368 2.18238,-2.7407 3.1974524,-3.3117 1.0150571,-0.5709 2.524968,-0.8564 4.5297325,-0.8564 l 18.727952,0 0,5.5575 -11.038831,0 z\" />";
        else if (greekLetter.equalsIgnoreCase("υ"))
            ret="<svg:path transform=\"translate (-13.267, -1551.37)\" d=\"m 17.943777,1537.035 c 3.682321,0.4477 6.403385,2.004 8.163202,4.6691 1.759764,2.6651 2.63966,5.7473 2.639688,9.2465 -2.8e-5,4.2927 -1.281726,7.9852 -3.845094,11.0776 -2.56342,3.0923 -5.625253,4.6385 -9.18551,4.6385 -1.973421,0 -3.773901,-0.534 -5.401441,-1.6021 -1.627564,-1.0681 -2.7159892,-2.3651 -3.2652818,-3.8909 -0.5493048,-1.5258 -0.8239541,-3.6722 -0.8239481,-6.439 l 0,-10.101 c -6e-6,-1.831 -0.1729345,-3.0822 -0.5187824,-3.7536 -0.34586,-0.6713 -0.9867105,-1.007 -1.9225484,-1.007 -1.3630777,0 -2.2582303,1.3631 -2.6854639,4.0892 L 0,1543.9623 c 0.26447725,-4.6181 2.2480551,-6.9272 5.9507428,-6.9273 1.2613477,10e-5 2.303997,0.3256 3.1279542,0.9766 0.8239389,0.651 1.393582,1.3987 1.708932,2.243 0.315328,0.8443 0.472997,2.3854 0.473006,4.6232 l 0,10.2536 c -9e-6,2.4007 0.137316,4.2062 0.411977,5.4167 0.274637,1.2105 0.895141,2.2023 1.861513,2.9754 0.966345,0.7731 2.029342,1.1596 3.18899,1.1596 1.953043,0 3.529735,-1.1342 4.730078,-3.4026 1.200297,-2.2684 1.800456,-5.6913 1.800481,-10.2688 -2.5e-5,-4.0892 -0.447599,-7.1053 -1.342734,-9.0482 -0.895174,-1.9429 -2.278594,-3.2195 -4.15026,-3.8299 l 0.183097,-1.0986 z\" />";
        else if (greekLetter.equalsIgnoreCase("φ"))
            ret="<svg:path transform=\"translate (-12.267, -1547.37)\" d=\"m 10.134839,1530.7334 0,0.9367 c -3.6580742,0.9888 -5.4871055,4.6142 -5.4871007,10.8763 -4.8e-6,6.7825 2.2759385,10.7721 6.8278407,11.9691 l 0,-15.1175 c -1.3e-5,-2.203 0.132405,-3.8119 0.397256,-4.8267 0.264825,-1.0148 0.848294,-1.9081 1.75041,-2.6801 0.902086,-0.7718 1.990402,-1.1578 3.264949,-1.1578 2.234546,0 4.307725,1.1015 6.219541,3.3045 1.911771,2.203 2.867667,5.0739 2.867695,8.6125 0,3.3132 -0.980753,6.2708 -2.94218,8.8728 -1.961475,2.602 -4.920203,4.0851 -8.876193,4.4494 l 0,10.6941 -2.681478,0 0,-10.6941 c -3.4428967,-0.3123 -6.202996,-1.661 -8.2803088,-4.0461 -2.0773203,-2.3852 -3.11597812,-5.4858 -3.11597812,-9.3021 0,-3.4346 0.94348142,-6.2404 2.83044992,-8.4174 1.8869609,-2.177 4.2953237,-3.3348 7.225097,-3.4736 l 0,0 z m 4.022218,23.7821 c 5.213967,-0.8153 7.820959,-4.3453 7.820982,-10.5901 -2.3e-5,-2.8795 -0.558664,-5.295 -1.675926,-7.2465 -1.117303,-1.9515 -2.429074,-2.9272 -3.935319,-2.9272 -0.546242,0 -1.00557,0.2038 -1.377981,0.6114 -0.372443,0.4077 -0.604175,0.8891 -0.695197,1.4441 -0.09105,0.5551 -0.136574,1.648 -0.136559,3.2785 l 0,15.4298 z\" />";
        else if (greekLetter.equalsIgnoreCase("χ"))
            ret="<svg:path transform=\"translate (-12.267, -1547.37)\" d=\"m 20.8879,1531.1 5.26711,0 -10.955615,18.7524 1.986464,7.3072 c 0.662141,2.4269 1.429629,3.9634 2.302485,4.6095 0.872822,0.646 1.931252,0.969 3.175323,0.969 2.929488,0 4.494584,-1.4841 4.695253,-4.4524 l 1.113627,0 c -0.04007,2.6016 -0.622049,4.6488 -1.745677,6.1417 -1.123677,1.4929 -2.638593,2.2393 -4.544775,2.2393 -1.665438,0 -2.989735,-0.4627 -3.972905,-1.3881 -0.983214,-0.9254 -1.856055,-2.7587 -2.618516,-5.5 l -1.986465,-7.2809 -8.0361097,14.0642 -5.26712164,0 11.64785134,-20.1404 -1.685467,-6.181 c -0.6220354,-2.2524 -1.2440559,-3.7758 -1.8660677,-4.5702 -0.6220309,-0.7945 -1.5951937,-1.1917 -2.9194908,-1.1917 -2.3476323,0 -3.8023604,1.554 -4.3641828,4.6619 L 0,1539.1405 c 0,-2.4444 0.48658005,-4.4567 1.4597435,-6.0369 0.97316,-1.5801 2.4228702,-2.3702 4.349138,-2.3702 1.6654055,0 2.9144611,0.5325 3.7471814,1.5976 0.8326931,1.0651 1.6302881,2.9945 2.3927661,5.7881 l 1.565106,5.6571 L 20.8879,1531.1 z\" />";
        else if (greekLetter.equalsIgnoreCase("ψ"))
            ret="<svg:path transform=\"translate (-14.267, -1547.37)\" d=\"m 16.513699,1554.3212 c 1.74956,-0.5429 2.999842,-1.5892 3.750865,-3.1389 0.750978,-1.5498 1.341044,-4.5574 1.770208,-9.0228 0.363097,-3.6598 0.680829,-6.107 0.953193,-7.3416 0.272311,-1.2345 0.812861,-2.2239 1.621658,-2.9682 0.808741,-0.7442 1.873343,-1.1163 3.193804,-1.1163 0.775725,0 1.617501,0.1226 2.525333,0.3677 l 0,0.9982 c -0.181594,-0.018 -0.338391,-0.026 -0.470408,-0.026 -0.709762,0 -1.312212,0.4553 -1.807343,1.3659 -0.495196,0.9106 -0.924335,3.1871 -1.287425,6.8294 -0.346643,3.2396 -0.730394,5.5467 -1.151256,6.9214 -0.420914,1.3746 -1.097638,2.723 -2.03017,4.0451 -0.932583,1.3221 -1.960047,2.3159 -3.082393,2.9813 -1.122394,0.6654 -2.451076,1.1645 -3.986066,1.4972 l 0,10.9534 -2.698646,0 0,-10.9534 c -1.601036,-0.3502 -2.979239,-0.8843 -4.1346091,-1.6023 -1.1553916,-0.7179 -2.1663486,-1.7292 -3.0328766,-3.0338 -0.8665425,-1.3046 -1.5102545,-2.6355 -1.931136,-3.9926 -0.4208959,-1.3571 -0.8128987,-3.7693 -1.1760145,-7.2366 -0.3466171,-3.3972 -0.7675063,-5.5423 -1.2626657,-6.4354 -0.4951676,-0.8931 -1.089361,-1.3396 -1.78258882,-1.3396 -0.14854966,0 -0.31360461,0.01 -0.49516228,0.026 l 0,-0.9982 c 0.90779591,-0.2451 1.7495737,-0.3677 2.5253321,-0.3677 1.3039264,0 2.3602751,0.3721 3.1690464,1.1163 0.8087595,0.7443 1.3658175,1.7337 1.671177,2.9682 0.305342,1.2346 0.590061,3.4454 0.8541549,6.6324 0.4456393,5.2184 1.0934765,8.5456 1.9435156,9.9815 0.850025,1.4359 2.067294,2.3991 3.651827,2.8894 l 0,-23.5878 2.698646,0 0,23.5878 z\" />";
        else
            ret="<svg:path transform=\"translate (-13.267, -1553.37)\" d=\"m 14.923976,1561.3028 c -1.442667,3.5753 -3.648096,5.3639 -6.6162967,5.3639 -2.0727814,0 -3.9755884,-1.0437 -5.7084213,-3.1292 C 0.86641767,1561.4509 -2.3999918e-6,1558.4476 0,1554.528 c -2.3999918e-6,-3.2142 0.51819088,-5.8384 1.5545802,-7.8705 1.0363843,-2.0316 2.3919758,-3.5898 4.0667841,-4.6736 1.6747934,-1.0839 3.905096,-1.6254 6.6909167,-1.6255 l 0,1.0022 c -2.4541788,0 -4.3611296,1.1019 -5.7208578,3.3056 -1.3597482,2.2036 -2.0396173,5.3285 -2.0396097,9.3741 -7.6e-6,4.1002 0.4435669,6.9097 1.3307208,8.4266 0.8871389,1.5169 1.935961,2.2763 3.146471,2.2763 0.779351,0 1.5379867,-0.2616 2.2759067,-0.7864 0.737895,-0.523 1.256088,-1.079 1.554581,-1.6663 0.298463,-0.5871 0.754473,-1.7927 1.368031,-3.6167 -1.044695,-2.3842 -1.567032,-4.9033 -1.567017,-7.5593 -1.5e-5,-4.0276 0.754472,-6.0417 2.263469,-6.0417 1.50896,0 2.263452,1.8605 2.263469,5.5811 -1.7e-5,2.5648 -0.547231,5.2387 -1.641638,8.0199 1.193901,4.0461 2.901863,6.0694 5.123901,6.0694 1.243639,0 2.317336,-0.7097 3.22109,-2.127 0.903703,-1.4171 1.355566,-4.0959 1.355594,-8.0336 0,-3.2875 -0.294359,-5.8024 -0.883003,-7.5455 -0.588694,-1.7429 -1.463402,-3.1068 -2.624131,-4.0912 -1.160777,-0.9842 -2.578552,-1.5126 -4.253333,-1.5853 l 0,-1.0022 c 2.785786,10e-5 5.016089,0.5514 6.690915,1.6531 1.674775,1.1018 3.026222,2.6547 4.054348,4.6598 1.028066,2.0052 1.542112,4.5968 1.542145,7.7757 0,3.9736 -0.833286,7.0039 -2.499767,9.0905 -1.666539,2.0855 -3.6108,3.1292 -5.832789,3.1292 -3.051144,0 -5.223409,-1.7886 -6.516801,-5.3639 l 0,0 z\" />";

        return ret;
    }

    private int countDepth(TreeNode node){
        int count=0;
        TreeNode swapNode = node.getParent();

        while (swapNode != null){
            count++;
            swapNode = swapNode.getParent();
        }

        return ++count;
    }

    private boolean isLeaf(TreeNode node){
        boolean ret=false;

        if (node.getChildren().size() == 0)
            ret=true;

        return ret;
    }

    private TreeNode getRoot(ArrayList<TreeNode> nodes){
        TreeNode root=null;

        for (int i=0; i<nodes.size();i++)
            if(nodes.get(i).getParent() == null){
               root=nodes.get(i);
               break;
            }

        return root;
    }

        /*private void getPos3(ArrayList<TreeNode> nodes){
        int ySpaceBetweenCircle = 60, xSpaceBetweenCircle = 200, maxDepth, maxWidth,canvasX;
        TreeNode root;
        ArrayList<Integer> widthList = new ArrayList<Integer>();

        maxDepth=getMaxDepth(nodes);//depth
        int[] printedXlevel = new int[maxDepth];
        for (int i=0;i<maxDepth;i++){
            widthList.add(new Integer((getWidth(i, nodes))));
            printedXlevel[i]=1;
        }
        maxWidth=getMaxWidth(widthList);

        int depthMaxWidthLvl=0;
        int swapWidth=0;
        for (int i=0;i<maxDepth;i++){
            if(swapWidth<widthList.get(i)){
                swapWidth=widthList.get(i);
                depthMaxWidthLvl=i+1;
            }
        }

        canvasX=(xSpaceBetweenCircle*2)+(maxWidth*rCircle*2)+(xSpaceBetweenCircle*(maxWidth-1));
        int cX=canvasX/(maxWidth*2);
        ArrayList<TreeNode> nodeMaxWidth = new ArrayList<TreeNode>();
        for(int i=0;i<nodes.size();i++){
            if(depthMaxWidthLvl==nodes.get(i).getDepth() && ! nodes.get(i).getDrawned()){
                if (nodes.get(i).getParent() != null) {
                    for(int s=0;s<nodes.get(i).getParent().getChildren().size();s++){
                        nodes.get(i).getParent().getChildren().get(s).setPosition((cX*printedXlevel[depthMaxWidthLvl-1]), ySpaceBetweenCircle+(rCircle*2+ySpaceBetweenCircle)*depthMaxWidthLvl+rCircle);
                        nodes.get(i).getParent().getChildren().get(s).setDrawned(true);
                        printedXlevel[depthMaxWidthLvl-1]++ ;
                        nodeMaxWidth.add(nodes.get(i).getParent().getChildren().get(s));
                    }
                } else {
                    nodes.get(i).setPosition(cX*printedXlevel[depthMaxWidthLvl-1], ySpaceBetweenCircle+(rCircle*2+ySpaceBetweenCircle)*depthMaxWidthLvl+rCircle);
                    nodes.get(i).setDrawned(true);
                    printedXlevel[depthMaxWidthLvl-1]++ ;
                }
            }
        }

        for (int i=0;i<nodeMaxWidth.size();i++) {
            if (nodeMaxWidth.get(i).getParent() != null && ! nodes.get(i).getDrawned()){
                drawUp();
            }
        }
    }

     private void drawUp(){
     */


        /*


        root=getRoot(nodes);
        root.setPosition(canvasX/2,ySpaceBetweenCircle+(root.getDepth()*rCircle));
        printedXlevel[0]++;
        int S=root.getChildren().size();
        for(int i=0;i<S;i++){
            drawNode(root.getChildren().get(i),S*i,canvasX)
            drawNode(root.getChildren().get(i), printedXlevel, widthList, canvasX);
        }*/
    //}


    /*private void drawNode(TreeNode node,int x0, int canvasX, ArrayList<Integer> nodiXlivello){
        int ySpaceBetweenCircle = 100;

        int depth = node.getDepth()-1;
        int S=canvasX-x0/nodiXlivello.get(depth);


        int depth = node.getDepth()-1;
        int spazio=spazioPadre/(widthList.get(depth)*node.getParent().getChildren().size());
        int centroX=(spazio/2)*nodiDisegnati[depth];

        node.setPosition(centroX,ySpaceBetweenCircle+(rCircle*2+ySpaceBetweenCircle)*depth+rCircle);
        nodiDisegnati[depth]++;

        if (isLeaf(node))
            return;

        for (int s=0; s <node.getChildren().size();s++){
            drawNode(node.getChildren().get(s), nodiDisegnati, widthList, spazio);
        }

    }*/
}